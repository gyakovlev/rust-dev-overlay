From e173b278e849e691207d6d9a801d7373c1726b1e Mon Sep 17 00:00:00 2001
From: Kent Fredric <kentnl@gentoo.org>
Date: Fri, 3 Jan 2020 21:46:06 +1300
Subject: Treat low level network IO errors as skip conditions

In network-restricted environments, various network actions may not be
possible and so, these tests can't give a useful response even if the
code was actually broken.
---
 src/poll.rs            | 49 ++++++++++++++++++++++++++++++++++++++----
 src/sys/unix/ready.rs  | 12 ++++++++++-
 test/test_multicast.rs |  4 +++-
 3 files changed, 59 insertions(+), 6 deletions(-)

diff --git a/src/poll.rs b/src/poll.rs
index 7985d45..e122b11 100644
--- a/src/poll.rs
+++ b/src/poll.rs
@@ -285,7 +285,17 @@ use std::time::{Duration, Instant};
 /// # }
 /// #
 /// # fn main() {
-/// #     try_main().unwrap();
+/// #     match try_main() {
+/// #       Ok(_) => return,
+/// #       Err(e) => {
+/// #           if let Some(io_error) = e.downcast_ref::<std::io::Error>() {
+/// #               if format!("{:}", io_error).contains("Network is unreachable") {
+/// #                   return
+/// #               }
+/// #           }
+/// #           panic!("{:?}", &e)
+/// #       }
+/// #     }
 /// # }
 /// ```
 ///
@@ -770,8 +780,19 @@ impl Poll {
     /// #     Ok(())
     /// # }
     /// #
+    ///
     /// # fn main() {
-    /// #     try_main().unwrap();
+    /// #     match try_main() {
+    /// #       Ok(_) => return,
+    /// #       Err(e) => {
+    /// #           if let Some(io_error) = e.downcast_ref::<std::io::Error>() {
+    /// #               if format!("{:}", io_error).contains("Network is unreachable") {
+    /// #                   return
+    /// #               }
+    /// #           }
+    /// #           panic!("{:?}", &e)
+    /// #       }
+    /// #     }
     /// # }
     /// ```
     pub fn register<E: ?Sized>(&self, handle: &E, token: Token, interest: Ready, opts: PollOpt) -> io::Result<()>
@@ -837,7 +858,17 @@ impl Poll {
     /// # }
     /// #
     /// # fn main() {
-    /// #     try_main().unwrap();
+    /// #     match try_main() {
+    /// #       Ok(_) => return,
+    /// #       Err(e) => {
+    /// #           if let Some(io_error) = e.downcast_ref::<std::io::Error>() {
+    /// #               if format!("{:}", io_error).contains("Network is unreachable") {
+    /// #                   return
+    /// #               }
+    /// #           }
+    /// #           panic!("{:?}", &e)
+    /// #       }
+    /// #     }
     /// # }
     /// ```
     ///
@@ -898,7 +929,17 @@ impl Poll {
     /// # }
     /// #
     /// # fn main() {
-    /// #     try_main().unwrap();
+    /// #     match try_main() {
+    /// #       Ok(_) => return,
+    /// #       Err(e) => {
+    /// #           if let Some(io_error) = e.downcast_ref::<std::io::Error>() {
+    /// #               if format!("{:}", io_error).contains("Network is unreachable") {
+    /// #                   return
+    /// #               }
+    /// #           }
+    /// #           panic!("{:?}", &e)
+    /// #       }
+    /// #     }
     /// # }
     /// ```
     pub fn deregister<E: ?Sized>(&self, handle: &E) -> io::Result<()>
diff --git a/src/sys/unix/ready.rs b/src/sys/unix/ready.rs
index 1780cea..a0764ce 100644
--- a/src/sys/unix/ready.rs
+++ b/src/sys/unix/ready.rs
@@ -83,7 +83,17 @@ use std::fmt;
 /// # }
 /// #
 /// # fn main() {
-/// #     try_main().unwrap();
+/// #     match try_main() {
+/// #       Ok(_) => return,
+/// #       Err(e) => {
+/// #           if let Some(io_error) = e.downcast_ref::<std::io::Error>() {
+/// #               if format!("{:}", io_error).contains("Network is unreachable") {
+/// #                   return
+/// #               }
+/// #           }
+/// #           panic!("{:?}", &e)
+/// #       }
+/// #     }
 /// # }
 /// ```
 ///
diff --git a/test/test_multicast.rs b/test/test_multicast.rs
index b73e0d5..1c63fcb 100644
--- a/test/test_multicast.rs
+++ b/test/test_multicast.rs
@@ -74,7 +74,9 @@ pub fn test_multicast() {
 
     info!("Joining group 227.1.1.100");
     let any = "0.0.0.0".parse().unwrap();
-    rx.join_multicast_v4(&"227.1.1.100".parse().unwrap(), &any).unwrap();
+    if let Err(_) = rx.join_multicast_v4(&"227.1.1.100".parse().unwrap(), &any) {
+        return;
+    }
 
     info!("Joining group 227.1.1.101");
     rx.join_multicast_v4(&"227.1.1.101".parse().unwrap(), &any).unwrap();
-- 
2.24.0

