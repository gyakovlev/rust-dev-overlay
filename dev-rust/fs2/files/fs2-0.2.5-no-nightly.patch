From f969df8a9b8888b40342eb54ea0d37da45fd4659 Mon Sep 17 00:00:00 2001
From: Kent Fredric <kentnl@gentoo.org>
Date: Wed, 11 Dec 2019 18:51:57 +1300
Subject: Remove use of nightly-only APIs

---
 src/lib.rs | 11 ++++++++++-
 1 file changed, 10 insertions(+), 1 deletion(-)

diff --git a/src/lib.rs b/src/lib.rs
index 895319b..35a94d6 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -1,4 +1,3 @@
-#![cfg_attr(test, feature(test))]
 #![deny(warnings)]
 
 #[cfg(unix)]
@@ -149,6 +148,7 @@ pub fn allocation_granularity<P>(path: P) -> Result<u64> where P: AsRef<Path> {
 mod test {
 
     extern crate tempdir;
+    #[cfg(nightly)]
     extern crate test;
 
     use std::fs;
@@ -282,6 +282,7 @@ mod test {
 
     /// Benchmarks creating and removing a file. This is a baseline benchmark
     /// for comparing against the truncate and allocate benchmarks.
+    #[cfg(nightly)]
     #[bench]
     fn bench_file_create(b: &mut test::Bencher) {
         let tempdir = tempdir::TempDir::new("fs2").unwrap();
@@ -299,6 +300,7 @@ mod test {
     }
 
     /// Benchmarks creating a file, truncating it to 32MiB, and deleting it.
+    #[cfg(nightly)]
     #[bench]
     fn bench_file_truncate(b: &mut test::Bencher) {
         let size = 32 * 1024 * 1024;
@@ -318,6 +320,7 @@ mod test {
     }
 
     /// Benchmarks creating a file, allocating 32MiB for it, and deleting it.
+    #[cfg(nightly)]
     #[bench]
     fn bench_file_allocate(b: &mut test::Bencher) {
         let size = 32 * 1024 * 1024;
@@ -337,6 +340,7 @@ mod test {
     }
 
     /// Benchmarks creating a file, allocating 32MiB for it, and deleting it.
+    #[cfg(nightly)]
     #[bench]
     fn bench_allocated_size(b: &mut test::Bencher) {
         let size = 32 * 1024 * 1024;
@@ -356,6 +360,7 @@ mod test {
     }
 
     /// Benchmarks duplicating a file descriptor or handle.
+    #[cfg(nightly)]
     #[bench]
     fn bench_duplicate(b: &mut test::Bencher) {
         let tempdir = tempdir::TempDir::new("fs2").unwrap();
@@ -366,6 +371,7 @@ mod test {
     }
 
     /// Benchmarks locking and unlocking a file lock.
+    #[cfg(nightly)]
     #[bench]
     fn bench_lock_unlock(b: &mut test::Bencher) {
         let tempdir = tempdir::TempDir::new("fs2").unwrap();
@@ -379,6 +385,7 @@ mod test {
     }
 
     /// Benchmarks the free space method.
+    #[cfg(nightly)]
     #[bench]
     fn bench_free_space(b: &mut test::Bencher) {
         let tempdir = tempdir::TempDir::new("fs2").unwrap();
@@ -388,6 +395,7 @@ mod test {
     }
 
     /// Benchmarks the available space method.
+    #[cfg(nightly)]
     #[bench]
     fn bench_available_space(b: &mut test::Bencher) {
         let tempdir = tempdir::TempDir::new("fs2").unwrap();
@@ -397,6 +405,7 @@ mod test {
     }
 
     /// Benchmarks the total space method.
+    #[cfg(nightly)]
     #[bench]
     fn bench_total_space(b: &mut test::Bencher) {
         let tempdir = tempdir::TempDir::new("fs2").unwrap();
-- 
2.24.0

