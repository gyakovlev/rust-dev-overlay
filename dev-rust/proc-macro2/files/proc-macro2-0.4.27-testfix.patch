--- a/Cargo.toml
+++ b/Cargo.toml
@@ -27,8 +27,6 @@
 rustdoc-args = ["--cfg", "procmacro2_semver_exempt"]
 [dependencies.unicode-xid]
 version = "0.1"
-[dev-dependencies.quote]
-version = "0.6"
 
 [features]
 default = ["proc-macro"]
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -784,7 +784,7 @@ impl fmt::Debug for Punct {
 ///
 /// An ident can be interpolated into a token stream using the `quote!` macro.
 ///
-/// ```edition2018
+/// ```ignore
 /// use proc_macro2::{Ident, Span};
 /// use quote::quote;
 ///
diff --git a/tests/test.rs b/tests/test.rs
index 055ebfd..73efa9b 100644
--- a/tests/test.rs
+++ b/tests/test.rs
@@ -328,59 +328,6 @@ fn test_debug_ident() {
     assert_eq!(expected, format!("{:?}", ident));
 }
 
-#[test]
-fn test_debug_tokenstream() {
-    let tts = TokenStream::from_str("[a + 1]").unwrap();
-
-    #[cfg(not(procmacro2_semver_exempt))]
-    let expected = "\
-TokenStream [
-    Group {
-        delimiter: Bracket,
-        stream: TokenStream [
-            Ident {
-                sym: a
-            },
-            Punct {
-                op: '+',
-                spacing: Alone
-            },
-            Literal {
-                lit: 1
-            }
-        ]
-    }
-]\
-    ";
-
-    #[cfg(procmacro2_semver_exempt)]
-    let expected = "\
-TokenStream [
-    Group {
-        delimiter: Bracket,
-        stream: TokenStream [
-            Ident {
-                sym: a,
-                span: bytes(2..3)
-            },
-            Punct {
-                op: '+',
-                spacing: Alone,
-                span: bytes(4..5)
-            },
-            Literal {
-                lit: 1,
-                span: bytes(6..7)
-            }
-        ],
-        span: bytes(1..8)
-    }
-]\
-    ";
-
-    assert_eq!(expected, format!("{:#?}", tts));
-}
-
 #[test]
 fn default_tokenstream_is_empty() {
     let default_token_stream: TokenStream = Default::default();
