From 0d004742af01ff731b6efd2b2572c2b483836089 Mon Sep 17 00:00:00 2001
From: Kent Fredric <kentnl@gentoo.org>
Date: Fri, 3 Jan 2020 07:38:02 +1300
Subject: Fix usage collision of flatten() in tests

Newer rusts have this function in their API and manual disambiguation is
required.
---
 src/lib.rs     | 2 +-
 tests/quick.rs | 6 +++---
 tests/tests.rs | 8 ++++----
 3 files changed, 8 insertions(+), 8 deletions(-)

diff --git a/src/lib.rs b/src/lib.rs
index e21535d..298aa8f 100755
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -940,7 +940,7 @@ pub trait Itertools : Iterator {
     /// use itertools::Itertools;
     ///
     /// let data = vec![vec![1, 2, 3], vec![4, 5, 6]];
-    /// let flattened = data.into_iter().flatten();
+    /// let flattened = Itertools::flatten(data.into_iter());
     ///
     /// itertools::assert_equal(flattened, vec![1, 2, 3, 4, 5, 6]);
     /// ```
diff --git a/tests/quick.rs b/tests/quick.rs
index 5b247b3..ebba45c 100644
--- a/tests/quick.rs
+++ b/tests/quick.rs
@@ -412,16 +412,16 @@ quickcheck! {
     }
 
     fn equal_flatten(a: Vec<Option<i32>>) -> bool {
-        itertools::equal(a.iter().flatten(),
+        itertools::equal(Itertools::flatten(a.iter()),
                          a.iter().filter_map(|x| x.as_ref()))
     }
 
     fn equal_flatten_vec(a: Vec<Vec<u8>>) -> bool {
-        itertools::equal(a.iter().flatten(),
+        itertools::equal(Itertools::flatten(a.iter()),
                          a.iter().flat_map(|x| x))
     }
     fn equal_flatten_vec_rev(a: Vec<Vec<u8>>) -> bool {
-        itertools::equal(a.iter().flatten().rev(),
+        itertools::equal(Itertools::flatten(a.iter()).rev(),
                          a.iter().flat_map(|x| x).rev())
     }
 
diff --git a/tests/tests.rs b/tests/tests.rs
index 9454d66..8d9f732 100644
--- a/tests/tests.rs
+++ b/tests/tests.rs
@@ -696,7 +696,7 @@ fn chunks() {
 #[test]
 fn flatten_iter() {
     let data = vec![vec![1,2,3], vec![4,5,6]];
-    let flattened = data.into_iter().flatten();
+    let flattened = Itertools::flatten(data.into_iter());
 
     it::assert_equal(flattened, vec![1,2,3,4,5,6]);
 }
@@ -704,7 +704,7 @@ fn flatten_iter() {
 #[test]
 fn flatten_rev() {
     let data = vec![vec![1,2,3].into_iter(), vec![4,5,6].into_iter()];
-    let flattened = data.into_iter().flatten().rev();
+    let flattened = Itertools::flatten(data.into_iter()).rev();
     it::assert_equal(flattened, vec![6,5,4,3,2,1]);
 }
 
@@ -714,7 +714,7 @@ fn flatten_clone() {
         &[1,2,3],
         &[4,5,6]
     ];
-    let flattened1 = data.into_iter().cloned().flatten();
+    let flattened1 = Itertools::flatten(data.into_iter().cloned());
     let flattened2 = flattened1.clone();
 
     it::assert_equal(flattened1, &[1,2,3,4,5,6]);
@@ -725,7 +725,7 @@ fn flatten_clone() {
 fn flatten_fold() {
     let xs = [0, 1, 1, 1, 2, 1, 3, 3];
     let ch = xs.iter().chunks(3);
-    let mut iter = ch.into_iter().flatten();
+    let mut iter = Itertools::flatten(ch.into_iter());
     iter.next();
     let mut xs_d = Vec::new();
     iter.fold((), |(), &elt| xs_d.push(elt));
-- 
2.24.0

